
ULTRASONIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  00000750  2**0
                  ALLOC
  3 .stab         0000171c  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000522  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00002390  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000957  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000399  00000000  00000000  00002dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dc  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  0000393c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001cc  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e8  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00003efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 44 01 	call	0x288	; 0x288 <main>
  8a:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IntToString>:
void lcd_write_number(uint16_t data){
	IntToString(data,txt);
	lcd_write_txt(txt);
}

void IntToString(uint16_t number, uint8_t *txt){
  92:	fb 01       	movw	r30, r22
	
	if(number < 10){
  94:	8a 30       	cpi	r24, 0x0A	; 10
  96:	91 05       	cpc	r25, r1
  98:	40 f4       	brcc	.+16     	; 0xaa <IntToString+0x18>
		txt[0] = number % 10 + 48;
  9a:	6a e0       	ldi	r22, 0x0A	; 10
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
  a2:	80 5d       	subi	r24, 0xD0	; 208
  a4:	80 83       	st	Z, r24
		txt[1] = '\0';
  a6:	11 82       	std	Z+1, r1	; 0x01
  a8:	08 95       	ret
	}
	else if(number < 100){
  aa:	84 36       	cpi	r24, 0x64	; 100
  ac:	91 05       	cpc	r25, r1
  ae:	50 f4       	brcc	.+20     	; 0xc4 <IntToString+0x32>
		txt[0] = number / 10 + 48;
  b0:	6a e0       	ldi	r22, 0x0A	; 10
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
  b8:	60 5d       	subi	r22, 0xD0	; 208
  ba:	60 83       	st	Z, r22
		txt[1] = number % 10 + 48;
  bc:	80 5d       	subi	r24, 0xD0	; 208
  be:	81 83       	std	Z+1, r24	; 0x01
		txt[2] = '\0';
  c0:	12 82       	std	Z+2, r1	; 0x02
  c2:	08 95       	ret
	}
	else if(number < 1000){
  c4:	23 e0       	ldi	r18, 0x03	; 3
  c6:	88 3e       	cpi	r24, 0xE8	; 232
  c8:	92 07       	cpc	r25, r18
  ca:	80 f4       	brcc	.+32     	; 0xec <IntToString+0x5a>
		txt[0] = number / 100 + 48;
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
  d4:	60 5d       	subi	r22, 0xD0	; 208
  d6:	60 83       	st	Z, r22
		number = number % 100 ;
		txt[1] = number / 10 + 48;
  d8:	6a e0       	ldi	r22, 0x0A	; 10
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
  e0:	60 5d       	subi	r22, 0xD0	; 208
  e2:	61 83       	std	Z+1, r22	; 0x01
		txt[2] = number % 10 + 48;
  e4:	80 5d       	subi	r24, 0xD0	; 208
  e6:	82 83       	std	Z+2, r24	; 0x02
		txt[3] = '\0';
  e8:	13 82       	std	Z+3, r1	; 0x03
  ea:	08 95       	ret
	}
	else  if(number < 10000){
  ec:	27 e2       	ldi	r18, 0x27	; 39
  ee:	80 31       	cpi	r24, 0x10	; 16
  f0:	92 07       	cpc	r25, r18
  f2:	b0 f4       	brcc	.+44     	; 0x120 <IntToString+0x8e>
		txt[0] = number / 1000 + 48;
  f4:	68 ee       	ldi	r22, 0xE8	; 232
  f6:	73 e0       	ldi	r23, 0x03	; 3
  f8:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
  fc:	60 5d       	subi	r22, 0xD0	; 208
  fe:	60 83       	st	Z, r22
		number = number % 1000 ;
		txt[1] = number / 100 + 48;
 100:	64 e6       	ldi	r22, 0x64	; 100
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
 108:	60 5d       	subi	r22, 0xD0	; 208
 10a:	61 83       	std	Z+1, r22	; 0x01
		number = number % 100 ;
		txt[2] = number / 10 + 48;
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
 114:	60 5d       	subi	r22, 0xD0	; 208
 116:	62 83       	std	Z+2, r22	; 0x02
		txt[3] = number % 10 + 48;
 118:	80 5d       	subi	r24, 0xD0	; 208
 11a:	83 83       	std	Z+3, r24	; 0x03
		txt[4] = '\0';
 11c:	14 82       	std	Z+4, r1	; 0x04
 11e:	08 95       	ret
	}
	else  if(number < 100000){
		txt[0] = number / 10000 + 48;
 120:	60 e1       	ldi	r22, 0x10	; 16
 122:	77 e2       	ldi	r23, 0x27	; 39
 124:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
 128:	60 5d       	subi	r22, 0xD0	; 208
 12a:	60 83       	st	Z, r22
		number = number % 10000 ;
		txt[1] = number / 1000 + 48;
 12c:	68 ee       	ldi	r22, 0xE8	; 232
 12e:	73 e0       	ldi	r23, 0x03	; 3
 130:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
 134:	60 5d       	subi	r22, 0xD0	; 208
 136:	61 83       	std	Z+1, r22	; 0x01
		number = number % 1000 ;
		txt[2] = number / 100 + 48;
 138:	64 e6       	ldi	r22, 0x64	; 100
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
 140:	60 5d       	subi	r22, 0xD0	; 208
 142:	62 83       	std	Z+2, r22	; 0x02
		number = number % 100 ;
		txt[3] = number / 10 + 48;
 144:	6a e0       	ldi	r22, 0x0A	; 10
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodhi4>
 14c:	60 5d       	subi	r22, 0xD0	; 208
 14e:	63 83       	std	Z+3, r22	; 0x03
		txt[4] = number % 10 + 48;
 150:	80 5d       	subi	r24, 0xD0	; 208
 152:	84 83       	std	Z+4, r24	; 0x04
		txt[5] = '\0';
 154:	15 82       	std	Z+5, r1	; 0x05
 156:	08 95       	ret

00000158 <lcd_send_pulse_for_update_data_or_cmd>:
	}
}

void lcd_send_pulse_for_update_data_or_cmd(){
	EN(1);
 158:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f ec       	ldi	r24, 0xCF	; 207
 15c:	97 e0       	ldi	r25, 0x07	; 7
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_send_pulse_for_update_data_or_cmd+0x6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_send_pulse_for_update_data_or_cmd+0xc>
 164:	00 00       	nop
	_delay_ms(1);
	EN(0);
 166:	c3 98       	cbi	0x18, 3	; 24
 168:	8f ec       	ldi	r24, 0xCF	; 207
 16a:	97 e0       	ldi	r25, 0x07	; 7
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_send_pulse_for_update_data_or_cmd+0x14>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_send_pulse_for_update_data_or_cmd+0x1a>
 172:	00 00       	nop
	_delay_ms(1);
}
 174:	08 95       	ret

00000176 <lcd_write>:
	lcd_write_cmd(0x06);  // increment cursor right
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
	_delay_ms(20);
}

void lcd_write(uint8_t cmd){
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
	// read first 4 bit
	D7(READBIT(cmd,7)); 
 17a:	88 23       	and	r24, r24
 17c:	14 f0       	brlt	.+4      	; 0x182 <lcd_write+0xc>
 17e:	df 98       	cbi	0x1b, 7	; 27
 180:	01 c0       	rjmp	.+2      	; 0x184 <lcd_write+0xe>
 182:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,6));
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	86 95       	lsr	r24
 18a:	86 95       	lsr	r24
 18c:	83 70       	andi	r24, 0x03	; 3
 18e:	80 fd       	sbrc	r24, 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <lcd_write+0x20>
 192:	de 98       	cbi	0x1b, 6	; 27
 194:	01 c0       	rjmp	.+2      	; 0x198 <lcd_write+0x22>
 196:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,5));
 198:	8c 2f       	mov	r24, r28
 19a:	82 95       	swap	r24
 19c:	86 95       	lsr	r24
 19e:	87 70       	andi	r24, 0x07	; 7
 1a0:	80 fd       	sbrc	r24, 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <lcd_write+0x32>
 1a4:	dd 98       	cbi	0x1b, 5	; 27
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <lcd_write+0x34>
 1a8:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,4));
 1aa:	8c 2f       	mov	r24, r28
 1ac:	82 95       	swap	r24
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	80 fd       	sbrc	r24, 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <lcd_write+0x42>
 1b4:	dc 98       	cbi	0x1b, 4	; 27
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_write+0x44>
 1b8:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 1ba:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_send_pulse_for_update_data_or_cmd>

	// read second 4 bit
	D7(READBIT(cmd,3));
 1be:	8c 2f       	mov	r24, r28
 1c0:	86 95       	lsr	r24
 1c2:	86 95       	lsr	r24
 1c4:	86 95       	lsr	r24
 1c6:	80 fd       	sbrc	r24, 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcd_write+0x58>
 1ca:	df 98       	cbi	0x1b, 7	; 27
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <lcd_write+0x5a>
 1ce:	df 9a       	sbi	0x1b, 7	; 27
	D6(READBIT(cmd,2));
 1d0:	8c 2f       	mov	r24, r28
 1d2:	86 95       	lsr	r24
 1d4:	86 95       	lsr	r24
 1d6:	80 fd       	sbrc	r24, 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <lcd_write+0x68>
 1da:	de 98       	cbi	0x1b, 6	; 27
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <lcd_write+0x6a>
 1de:	de 9a       	sbi	0x1b, 6	; 27
	D5(READBIT(cmd,1));
 1e0:	8c 2f       	mov	r24, r28
 1e2:	86 95       	lsr	r24
 1e4:	80 fd       	sbrc	r24, 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <lcd_write+0x76>
 1e8:	dd 98       	cbi	0x1b, 5	; 27
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <lcd_write+0x78>
 1ec:	dd 9a       	sbi	0x1b, 5	; 27
	D4(READBIT(cmd,0));
 1ee:	c0 fd       	sbrc	r28, 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <lcd_write+0x80>
 1f2:	dc 98       	cbi	0x1b, 4	; 27
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <lcd_write+0x82>
 1f6:	dc 9a       	sbi	0x1b, 4	; 27

	lcd_send_pulse_for_update_data_or_cmd();
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_send_pulse_for_update_data_or_cmd>
}
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_write_char>:
	RS(0); // Rs = 0
	lcd_write(cmd);
}

void lcd_write_char(uint8_t cmd){
	RS(1); // Rs = 1
 200:	c1 9a       	sbi	0x18, 1	; 24
	lcd_write(cmd);
 202:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_write>
}
 206:	08 95       	ret

00000208 <lcd_write_txt>:



void lcd_write_txt(uint8_t *x){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	for(int i = 0; x[i] != '\0'; i++)
 20e:	88 81       	ld	r24, Y
 210:	88 23       	and	r24, r24
 212:	31 f0       	breq	.+12     	; 0x220 <lcd_write_txt+0x18>
	lcd_write(cmd);
}



void lcd_write_txt(uint8_t *x){
 214:	21 96       	adiw	r28, 0x01	; 1
	for(int i = 0; x[i] != '\0'; i++)
		lcd_write_char(x[i]);
 216:	0e 94 00 01 	call	0x200	; 0x200 <lcd_write_char>
}



void lcd_write_txt(uint8_t *x){
	for(int i = 0; x[i] != '\0'; i++)
 21a:	89 91       	ld	r24, Y+
 21c:	88 23       	and	r24, r24
 21e:	d9 f7       	brne	.-10     	; 0x216 <lcd_write_txt+0xe>
		lcd_write_char(x[i]);
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <lcd_write_number>:



void lcd_write_number(uint16_t data){
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
	IntToString(data,txt);
 22a:	c2 e8       	ldi	r28, 0x82	; 130
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	be 01       	movw	r22, r28
 230:	0e 94 49 00 	call	0x92	; 0x92 <IntToString>
	lcd_write_txt(txt);
 234:	ce 01       	movw	r24, r28
 236:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_txt>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <lcd_write_cmd>:
	lcd_send_pulse_for_update_data_or_cmd();
}


void lcd_write_cmd(uint8_t cmd){
	RS(0); // Rs = 0
 240:	c1 98       	cbi	0x18, 1	; 24
	lcd_write(cmd);
 242:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_write>
}
 246:	08 95       	ret

00000248 <lcd_init>:

#include "lcd.h"
uint8_t txt[5];

void lcd_init(){
	INIT_PORT;
 248:	8a b3       	in	r24, 0x1a	; 26
 24a:	80 6f       	ori	r24, 0xF0	; 240
 24c:	8a bb       	out	0x1a, r24	; 26
 24e:	87 b3       	in	r24, 0x17	; 23
 250:	8e 60       	ori	r24, 0x0E	; 14
 252:	87 bb       	out	0x17, r24	; 23
	Rw(0);
 254:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd(0x2);
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
	lcd_write_cmd(0x28);  // 4data line
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
	lcd_write_cmd(0x01);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
	lcd_write_cmd(0x0c);  // display on cursor off
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
	lcd_write_cmd(0x06);  // increment cursor right
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9c e9       	ldi	r25, 0x9C	; 156
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init+0x36>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_init+0x3c>
 284:	00 00       	nop
	_delay_ms(20);
}
 286:	08 95       	ret

00000288 <main>:
#include "ULTSonic.h"

int main(void)
{
	uint16_t r;
	lcd_init();
 288:	0e 94 24 01 	call	0x248	; 0x248 <lcd_init>
	lcd_write_txt("Distance: ");
 28c:	80 e6       	ldi	r24, 0x60	; 96
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_txt>
             //Measure the width of pulse
             r=getPulseWidth();
			 //Handle Errors
			          if(r==US_ERROR)
			         {
				            lcd_write_txt("Error !");
 294:	0f 2e       	mov	r0, r31
 296:	fb e6       	ldi	r31, 0x6B	; 107
 298:	ef 2e       	mov	r14, r31
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	ff 2e       	mov	r15, r31
 29e:	f0 2d       	mov	r31, r0
				             static int d;
							
				            d=(r/58.3); //Convert to cm
							
							lcd_write_cmd(clear);
							lcd_write_txt("Distance: ");
 2a0:	c0 e6       	ldi	r28, 0x60	; 96
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
							
							lcd_write_number(d);
							lcd_write_txt(" cm");
 2a4:	0b e7       	ldi	r16, 0x7B	; 123
 2a6:	10 e0       	ldi	r17, 0x00	; 0
			         {
				            lcd_write_txt("Error !");
			         }
			         else  if(r==US_NO_OBSTACLE)
			        {
		           lcd_write_txt("Clear !");
 2a8:	0f 2e       	mov	r0, r31
 2aa:	f3 e7       	ldi	r31, 0x73	; 115
 2ac:	cf 2e       	mov	r12, r31
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	df 2e       	mov	r13, r31
 2b2:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {
         //Set Ultra Sonic Port as out
         US_DDR|=(1<<US_POS);
 2b4:	d0 9a       	sbi	0x1a, 0	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	2a e1       	ldi	r18, 0x1A	; 26
 2b8:	2a 95       	dec	r18
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x30>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x36>
        _delay_us(10);
    //Give the US pin a 15us High Pulse
             US_PORT|=(1<<US_POS);   //High
 2be:	d8 9a       	sbi	0x1b, 0	; 27
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x3a>
    
             _delay_us(15);
    
             US_PORT&=(~(1<<US_POS));//Low
 2c6:	d8 98       	cbi	0x1b, 0	; 27
 2c8:	25 e3       	ldi	r18, 0x35	; 53
 2ca:	2a 95       	dec	r18
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x42>
 2ce:	00 00       	nop
   
            _delay_us(20);
   
             //Now make the pin input
            US_DDR&=(~(1<<US_POS));
 2d0:	d0 98       	cbi	0x1a, 0	; 26
    
             //Measure the width of pulse
             r=getPulseWidth();
 2d2:	0e 94 9f 01 	call	0x33e	; 0x33e <getPulseWidth>
			 //Handle Errors
			          if(r==US_ERROR)
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	8f 3f       	cpi	r24, 0xFF	; 255
 2da:	92 07       	cpc	r25, r18
 2dc:	21 f4       	brne	.+8      	; 0x2e6 <main+0x5e>
			         {
				            lcd_write_txt("Error !");
 2de:	c7 01       	movw	r24, r14
 2e0:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_txt>
 2e4:	e7 cf       	rjmp	.-50     	; 0x2b4 <main+0x2c>
			         }
			         else  if(r==US_NO_OBSTACLE)
 2e6:	8f 3f       	cpi	r24, 0xFF	; 255
 2e8:	91 05       	cpc	r25, r1
 2ea:	21 f4       	brne	.+8      	; 0x2f4 <main+0x6c>
			        {
		           lcd_write_txt("Clear !");
 2ec:	c6 01       	movw	r24, r12
 2ee:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_txt>
 2f2:	e0 cf       	rjmp	.-64     	; 0x2b4 <main+0x2c>
			        else
			       {
				 
				             static int d;
							
				            d=(r/58.3); //Convert to cm
 2f4:	bc 01       	movw	r22, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 aa 02 	call	0x554	; 0x554 <__floatunsisf>
 2fe:	23 e3       	ldi	r18, 0x33	; 51
 300:	33 e3       	ldi	r19, 0x33	; 51
 302:	49 e6       	ldi	r20, 0x69	; 105
 304:	52 e4       	ldi	r21, 0x42	; 66
 306:	0e 94 11 02 	call	0x422	; 0x422 <__divsf3>
 30a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fixsfsi>
 30e:	dc 01       	movw	r26, r24
 310:	cb 01       	movw	r24, r22
 312:	90 93 81 00 	sts	0x0081, r25
 316:	80 93 80 00 	sts	0x0080, r24
							
							lcd_write_cmd(clear);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_cmd>
							lcd_write_txt("Distance: ");
 320:	ce 01       	movw	r24, r28
 322:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_txt>
							
							lcd_write_number(d);
 326:	80 91 80 00 	lds	r24, 0x0080
 32a:	90 91 81 00 	lds	r25, 0x0081
 32e:	0e 94 13 01 	call	0x226	; 0x226 <lcd_write_number>
							lcd_write_txt(" cm");
 332:	c8 01       	movw	r24, r16
 334:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_txt>
			
					 Wait();
 338:	0e 94 08 02 	call	0x410	; 0x410 <Wait>
 33c:	bb cf       	rjmp	.-138    	; 0x2b4 <main+0x2c>

0000033e <getPulseWidth>:
      uint32_t i,result;

	      //Wait for the rising edge
	       for(i=0;i<600000;i++)
		    {
	          if(!(US_PIN & (1<<US_POS))) 
 33e:	c8 99       	sbic	0x19, 0	; 25
 340:	1d c0       	rjmp	.+58     	; 0x37c <getPulseWidth+0x3e>
uint16_t getPulseWidth()
 {
      uint32_t i,result;

	      //Wait for the rising edge
	       for(i=0;i<600000;i++)
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	a0 e0       	ldi	r26, 0x00	; 0
 348:	b0 e0       	ldi	r27, 0x00	; 0
		    {
	          if(!(US_PIN & (1<<US_POS))) 
 34a:	c8 99       	sbic	0x19, 0	; 25
 34c:	0e c0       	rjmp	.+28     	; 0x36a <getPulseWidth+0x2c>
uint16_t getPulseWidth()
 {
      uint32_t i,result;

	      //Wait for the rising edge
	       for(i=0;i<600000;i++)
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	a1 1d       	adc	r26, r1
 352:	b1 1d       	adc	r27, r1
 354:	80 3c       	cpi	r24, 0xC0	; 192
 356:	27 e2       	ldi	r18, 0x27	; 39
 358:	92 07       	cpc	r25, r18
 35a:	29 e0       	ldi	r18, 0x09	; 9
 35c:	a2 07       	cpc	r26, r18
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	b2 07       	cpc	r27, r18
 362:	99 f7       	brne	.-26     	; 0x34a <getPulseWidth+0xc>
			  continue; 
			  else break;
	        }
	
	       if(i==600000)
	         return 0xffff; //Indicates time out
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	9f ef       	ldi	r25, 0xFF	; 255
 368:	08 95       	ret
	          if(!(US_PIN & (1<<US_POS))) 
			  continue; 
			  else break;
	        }
	
	       if(i==600000)
 36a:	80 3c       	cpi	r24, 0xC0	; 192
 36c:	47 e2       	ldi	r20, 0x27	; 39
 36e:	94 07       	cpc	r25, r20
 370:	49 e0       	ldi	r20, 0x09	; 9
 372:	a4 07       	cpc	r26, r20
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	b4 07       	cpc	r27, r20
 378:	09 f4       	brne	.+2      	; 0x37c <getPulseWidth+0x3e>
 37a:	41 c0       	rjmp	.+130    	; 0x3fe <getPulseWidth+0xc0>
	         return 0xffff; //Indicates time out
	
	      //High Edge Found
	
	      //Setup Timer1
	      TCCR1A=0X00;
 37c:	1f bc       	out	0x2f, r1	; 47
	     TCCR1B=(1<<CS11); //Prescaler = Fcpu/8
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	8e bd       	out	0x2e, r24	; 46
	      TCNT1=0x00;       //Init counter
 382:	1d bc       	out	0x2d, r1	; 45
 384:	1c bc       	out	0x2c, r1	; 44

	       //Now wait for the falling edge
	       for(i=0;i<600000;i++)
	   {
		        if(US_PIN & (1<<US_POS))
 386:	c8 9b       	sbis	0x19, 0	; 25
 388:	28 c0       	rjmp	.+80     	; 0x3da <getPulseWidth+0x9c>
		    {
			            if(TCNT1 > 60000) break; else continue;
 38a:	8c b5       	in	r24, 0x2c	; 44
 38c:	9d b5       	in	r25, 0x2d	; 45
 38e:	2a ee       	ldi	r18, 0xEA	; 234
 390:	81 36       	cpi	r24, 0x61	; 97
 392:	92 07       	cpc	r25, r18
 394:	10 f5       	brcc	.+68     	; 0x3da <getPulseWidth+0x9c>
	      TCCR1A=0X00;
	     TCCR1B=(1<<CS11); //Prescaler = Fcpu/8
	      TCNT1=0x00;       //Init counter

	       //Now wait for the falling edge
	       for(i=0;i<600000;i++)
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	a0 e0       	ldi	r26, 0x00	; 0
 39c:	b0 e0       	ldi	r27, 0x00	; 0
	   {
		        if(US_PIN & (1<<US_POS))
 39e:	c8 9b       	sbis	0x19, 0	; 25
 3a0:	14 c0       	rjmp	.+40     	; 0x3ca <getPulseWidth+0x8c>
		    {
			            if(TCNT1 > 60000) break; else continue;
 3a2:	2c b5       	in	r18, 0x2c	; 44
 3a4:	3d b5       	in	r19, 0x2d	; 45
 3a6:	4a ee       	ldi	r20, 0xEA	; 234
 3a8:	21 36       	cpi	r18, 0x61	; 97
 3aa:	34 07       	cpc	r19, r20
 3ac:	70 f4       	brcc	.+28     	; 0x3ca <getPulseWidth+0x8c>
	      TCCR1A=0X00;
	     TCCR1B=(1<<CS11); //Prescaler = Fcpu/8
	      TCNT1=0x00;       //Init counter

	       //Now wait for the falling edge
	       for(i=0;i<600000;i++)
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	a1 1d       	adc	r26, r1
 3b2:	b1 1d       	adc	r27, r1
 3b4:	80 3c       	cpi	r24, 0xC0	; 192
 3b6:	27 e2       	ldi	r18, 0x27	; 39
 3b8:	92 07       	cpc	r25, r18
 3ba:	29 e0       	ldi	r18, 0x09	; 9
 3bc:	a2 07       	cpc	r26, r18
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	b2 07       	cpc	r27, r18
 3c2:	69 f7       	brne	.-38     	; 0x39e <getPulseWidth+0x60>
		        else
		           break;
	     }

	     if(i == 600000)
	        return 0xffff; //Indicates time out
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	08 95       	ret
		       }
		        else
		           break;
	     }

	     if(i == 600000)
 3ca:	80 3c       	cpi	r24, 0xC0	; 192
 3cc:	47 e2       	ldi	r20, 0x27	; 39
 3ce:	94 07       	cpc	r25, r20
 3d0:	49 e0       	ldi	r20, 0x09	; 9
 3d2:	a4 07       	cpc	r26, r20
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	b4 07       	cpc	r27, r20
 3d8:	a9 f0       	breq	.+42     	; 0x404 <getPulseWidth+0xc6>
	        return 0xffff; //Indicates time out

	    //Falling edge found
	
	     result=TCNT1;
 3da:	8c b5       	in	r24, 0x2c	; 44
 3dc:	9d b5       	in	r25, 0x2d	; 45
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0

	      //Stop Timer
	      TCCR1B = 0x00;
 3e2:	1e bc       	out	0x2e, r1	; 46

	      if(result > 60000)
 3e4:	81 36       	cpi	r24, 0x61	; 97
 3e6:	2a ee       	ldi	r18, 0xEA	; 234
 3e8:	92 07       	cpc	r25, r18
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	a2 07       	cpc	r26, r18
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	b2 07       	cpc	r27, r18
 3f2:	58 f4       	brcc	.+22     	; 0x40a <getPulseWidth+0xcc>
	         return 0xfffe; //No obstacle
	 else
  return (result>>1);
 3f4:	b6 95       	lsr	r27
 3f6:	a7 95       	ror	r26
 3f8:	97 95       	ror	r25
 3fa:	87 95       	ror	r24
 3fc:	08 95       	ret
			  continue; 
			  else break;
	        }
	
	       if(i==600000)
	         return 0xffff; //Indicates time out
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	08 95       	ret
		        else
		           break;
	     }

	     if(i == 600000)
	        return 0xffff; //Indicates time out
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f ef       	ldi	r25, 0xFF	; 255
 408:	08 95       	ret

	      //Stop Timer
	      TCCR1B = 0x00;

	      if(result > 60000)
	         return 0xfffe; //No obstacle
 40a:	8e ef       	ldi	r24, 0xFE	; 254
 40c:	9f ef       	ldi	r25, 0xFF	; 255
	 else
  return (result>>1);
 }
 40e:	08 95       	ret

00000410 <Wait>:

void Wait()
{
 410:	4a e0       	ldi	r20, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	c9 01       	movw	r24, r18
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <Wait+0x8>
 41c:	41 50       	subi	r20, 0x01	; 1
	      uint8_t i;
	     for(i=0;i<10;i++)
 41e:	d9 f7       	brne	.-10     	; 0x416 <Wait+0x6>
	         _delay_loop_2(0);
 420:	08 95       	ret

00000422 <__divsf3>:
 422:	0c d0       	rcall	.+24     	; 0x43c <__divsf3x>
 424:	eb c0       	rjmp	.+470    	; 0x5fc <__fp_round>
 426:	e3 d0       	rcall	.+454    	; 0x5ee <__fp_pscB>
 428:	40 f0       	brcs	.+16     	; 0x43a <__divsf3+0x18>
 42a:	da d0       	rcall	.+436    	; 0x5e0 <__fp_pscA>
 42c:	30 f0       	brcs	.+12     	; 0x43a <__divsf3+0x18>
 42e:	21 f4       	brne	.+8      	; 0x438 <__divsf3+0x16>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	19 f0       	breq	.+6      	; 0x43a <__divsf3+0x18>
 434:	cc c0       	rjmp	.+408    	; 0x5ce <__fp_inf>
 436:	51 11       	cpse	r21, r1
 438:	15 c1       	rjmp	.+554    	; 0x664 <__fp_szero>
 43a:	cf c0       	rjmp	.+414    	; 0x5da <__fp_nan>

0000043c <__divsf3x>:
 43c:	f0 d0       	rcall	.+480    	; 0x61e <__fp_split3>
 43e:	98 f3       	brcs	.-26     	; 0x426 <__divsf3+0x4>

00000440 <__divsf3_pse>:
 440:	99 23       	and	r25, r25
 442:	c9 f3       	breq	.-14     	; 0x436 <__divsf3+0x14>
 444:	55 23       	and	r21, r21
 446:	b1 f3       	breq	.-20     	; 0x434 <__divsf3+0x12>
 448:	95 1b       	sub	r25, r21
 44a:	55 0b       	sbc	r21, r21
 44c:	bb 27       	eor	r27, r27
 44e:	aa 27       	eor	r26, r26
 450:	62 17       	cp	r22, r18
 452:	73 07       	cpc	r23, r19
 454:	84 07       	cpc	r24, r20
 456:	38 f0       	brcs	.+14     	; 0x466 <__divsf3_pse+0x26>
 458:	9f 5f       	subi	r25, 0xFF	; 255
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	44 1f       	adc	r20, r20
 462:	aa 1f       	adc	r26, r26
 464:	a9 f3       	breq	.-22     	; 0x450 <__divsf3_pse+0x10>
 466:	33 d0       	rcall	.+102    	; 0x4ce <__divsf3_pse+0x8e>
 468:	0e 2e       	mov	r0, r30
 46a:	3a f0       	brmi	.+14     	; 0x47a <__divsf3_pse+0x3a>
 46c:	e0 e8       	ldi	r30, 0x80	; 128
 46e:	30 d0       	rcall	.+96     	; 0x4d0 <__divsf3_pse+0x90>
 470:	91 50       	subi	r25, 0x01	; 1
 472:	50 40       	sbci	r21, 0x00	; 0
 474:	e6 95       	lsr	r30
 476:	00 1c       	adc	r0, r0
 478:	ca f7       	brpl	.-14     	; 0x46c <__divsf3_pse+0x2c>
 47a:	29 d0       	rcall	.+82     	; 0x4ce <__divsf3_pse+0x8e>
 47c:	fe 2f       	mov	r31, r30
 47e:	27 d0       	rcall	.+78     	; 0x4ce <__divsf3_pse+0x8e>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	bb 1f       	adc	r27, r27
 488:	26 17       	cp	r18, r22
 48a:	37 07       	cpc	r19, r23
 48c:	48 07       	cpc	r20, r24
 48e:	ab 07       	cpc	r26, r27
 490:	b0 e8       	ldi	r27, 0x80	; 128
 492:	09 f0       	breq	.+2      	; 0x496 <__divsf3_pse+0x56>
 494:	bb 0b       	sbc	r27, r27
 496:	80 2d       	mov	r24, r0
 498:	bf 01       	movw	r22, r30
 49a:	ff 27       	eor	r31, r31
 49c:	93 58       	subi	r25, 0x83	; 131
 49e:	5f 4f       	sbci	r21, 0xFF	; 255
 4a0:	2a f0       	brmi	.+10     	; 0x4ac <__divsf3_pse+0x6c>
 4a2:	9e 3f       	cpi	r25, 0xFE	; 254
 4a4:	51 05       	cpc	r21, r1
 4a6:	68 f0       	brcs	.+26     	; 0x4c2 <__divsf3_pse+0x82>
 4a8:	92 c0       	rjmp	.+292    	; 0x5ce <__fp_inf>
 4aa:	dc c0       	rjmp	.+440    	; 0x664 <__fp_szero>
 4ac:	5f 3f       	cpi	r21, 0xFF	; 255
 4ae:	ec f3       	brlt	.-6      	; 0x4aa <__divsf3_pse+0x6a>
 4b0:	98 3e       	cpi	r25, 0xE8	; 232
 4b2:	dc f3       	brlt	.-10     	; 0x4aa <__divsf3_pse+0x6a>
 4b4:	86 95       	lsr	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b7 95       	ror	r27
 4bc:	f7 95       	ror	r31
 4be:	9f 5f       	subi	r25, 0xFF	; 255
 4c0:	c9 f7       	brne	.-14     	; 0x4b4 <__divsf3_pse+0x74>
 4c2:	88 0f       	add	r24, r24
 4c4:	91 1d       	adc	r25, r1
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret
 4ce:	e1 e0       	ldi	r30, 0x01	; 1
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	bb 1f       	adc	r27, r27
 4d8:	62 17       	cp	r22, r18
 4da:	73 07       	cpc	r23, r19
 4dc:	84 07       	cpc	r24, r20
 4de:	ba 07       	cpc	r27, r26
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__divsf3_pse+0xaa>
 4e2:	62 1b       	sub	r22, r18
 4e4:	73 0b       	sbc	r23, r19
 4e6:	84 0b       	sbc	r24, r20
 4e8:	ba 0b       	sbc	r27, r26
 4ea:	ee 1f       	adc	r30, r30
 4ec:	88 f7       	brcc	.-30     	; 0x4d0 <__divsf3_pse+0x90>
 4ee:	e0 95       	com	r30
 4f0:	08 95       	ret

000004f2 <__fixsfsi>:
 4f2:	04 d0       	rcall	.+8      	; 0x4fc <__fixunssfsi>
 4f4:	68 94       	set
 4f6:	b1 11       	cpse	r27, r1
 4f8:	b5 c0       	rjmp	.+362    	; 0x664 <__fp_szero>
 4fa:	08 95       	ret

000004fc <__fixunssfsi>:
 4fc:	98 d0       	rcall	.+304    	; 0x62e <__fp_splitA>
 4fe:	88 f0       	brcs	.+34     	; 0x522 <__fixunssfsi+0x26>
 500:	9f 57       	subi	r25, 0x7F	; 127
 502:	90 f0       	brcs	.+36     	; 0x528 <__fixunssfsi+0x2c>
 504:	b9 2f       	mov	r27, r25
 506:	99 27       	eor	r25, r25
 508:	b7 51       	subi	r27, 0x17	; 23
 50a:	a0 f0       	brcs	.+40     	; 0x534 <__fixunssfsi+0x38>
 50c:	d1 f0       	breq	.+52     	; 0x542 <__fixunssfsi+0x46>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	1a f0       	brmi	.+6      	; 0x51e <__fixunssfsi+0x22>
 518:	ba 95       	dec	r27
 51a:	c9 f7       	brne	.-14     	; 0x50e <__fixunssfsi+0x12>
 51c:	12 c0       	rjmp	.+36     	; 0x542 <__fixunssfsi+0x46>
 51e:	b1 30       	cpi	r27, 0x01	; 1
 520:	81 f0       	breq	.+32     	; 0x542 <__fixunssfsi+0x46>
 522:	9f d0       	rcall	.+318    	; 0x662 <__fp_zero>
 524:	b1 e0       	ldi	r27, 0x01	; 1
 526:	08 95       	ret
 528:	9c c0       	rjmp	.+312    	; 0x662 <__fp_zero>
 52a:	67 2f       	mov	r22, r23
 52c:	78 2f       	mov	r23, r24
 52e:	88 27       	eor	r24, r24
 530:	b8 5f       	subi	r27, 0xF8	; 248
 532:	39 f0       	breq	.+14     	; 0x542 <__fixunssfsi+0x46>
 534:	b9 3f       	cpi	r27, 0xF9	; 249
 536:	cc f3       	brlt	.-14     	; 0x52a <__fixunssfsi+0x2e>
 538:	86 95       	lsr	r24
 53a:	77 95       	ror	r23
 53c:	67 95       	ror	r22
 53e:	b3 95       	inc	r27
 540:	d9 f7       	brne	.-10     	; 0x538 <__fixunssfsi+0x3c>
 542:	3e f4       	brtc	.+14     	; 0x552 <__fixunssfsi+0x56>
 544:	90 95       	com	r25
 546:	80 95       	com	r24
 548:	70 95       	com	r23
 54a:	61 95       	neg	r22
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	8f 4f       	sbci	r24, 0xFF	; 255
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <__floatunsisf>:
 554:	e8 94       	clt
 556:	09 c0       	rjmp	.+18     	; 0x56a <__floatsisf+0x12>

00000558 <__floatsisf>:
 558:	97 fb       	bst	r25, 7
 55a:	3e f4       	brtc	.+14     	; 0x56a <__floatsisf+0x12>
 55c:	90 95       	com	r25
 55e:	80 95       	com	r24
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	99 23       	and	r25, r25
 56c:	a9 f0       	breq	.+42     	; 0x598 <__floatsisf+0x40>
 56e:	f9 2f       	mov	r31, r25
 570:	96 e9       	ldi	r25, 0x96	; 150
 572:	bb 27       	eor	r27, r27
 574:	93 95       	inc	r25
 576:	f6 95       	lsr	r31
 578:	87 95       	ror	r24
 57a:	77 95       	ror	r23
 57c:	67 95       	ror	r22
 57e:	b7 95       	ror	r27
 580:	f1 11       	cpse	r31, r1
 582:	f8 cf       	rjmp	.-16     	; 0x574 <__floatsisf+0x1c>
 584:	fa f4       	brpl	.+62     	; 0x5c4 <__floatsisf+0x6c>
 586:	bb 0f       	add	r27, r27
 588:	11 f4       	brne	.+4      	; 0x58e <__floatsisf+0x36>
 58a:	60 ff       	sbrs	r22, 0
 58c:	1b c0       	rjmp	.+54     	; 0x5c4 <__floatsisf+0x6c>
 58e:	6f 5f       	subi	r22, 0xFF	; 255
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	16 c0       	rjmp	.+44     	; 0x5c4 <__floatsisf+0x6c>
 598:	88 23       	and	r24, r24
 59a:	11 f0       	breq	.+4      	; 0x5a0 <__floatsisf+0x48>
 59c:	96 e9       	ldi	r25, 0x96	; 150
 59e:	11 c0       	rjmp	.+34     	; 0x5c2 <__floatsisf+0x6a>
 5a0:	77 23       	and	r23, r23
 5a2:	21 f0       	breq	.+8      	; 0x5ac <__floatsisf+0x54>
 5a4:	9e e8       	ldi	r25, 0x8E	; 142
 5a6:	87 2f       	mov	r24, r23
 5a8:	76 2f       	mov	r23, r22
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <__floatsisf+0x5e>
 5ac:	66 23       	and	r22, r22
 5ae:	71 f0       	breq	.+28     	; 0x5cc <__floatsisf+0x74>
 5b0:	96 e8       	ldi	r25, 0x86	; 134
 5b2:	86 2f       	mov	r24, r22
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	2a f0       	brmi	.+10     	; 0x5c4 <__floatsisf+0x6c>
 5ba:	9a 95       	dec	r25
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	da f7       	brpl	.-10     	; 0x5ba <__floatsisf+0x62>
 5c4:	88 0f       	add	r24, r24
 5c6:	96 95       	lsr	r25
 5c8:	87 95       	ror	r24
 5ca:	97 f9       	bld	r25, 7
 5cc:	08 95       	ret

000005ce <__fp_inf>:
 5ce:	97 f9       	bld	r25, 7
 5d0:	9f 67       	ori	r25, 0x7F	; 127
 5d2:	80 e8       	ldi	r24, 0x80	; 128
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	08 95       	ret

000005da <__fp_nan>:
 5da:	9f ef       	ldi	r25, 0xFF	; 255
 5dc:	80 ec       	ldi	r24, 0xC0	; 192
 5de:	08 95       	ret

000005e0 <__fp_pscA>:
 5e0:	00 24       	eor	r0, r0
 5e2:	0a 94       	dec	r0
 5e4:	16 16       	cp	r1, r22
 5e6:	17 06       	cpc	r1, r23
 5e8:	18 06       	cpc	r1, r24
 5ea:	09 06       	cpc	r0, r25
 5ec:	08 95       	ret

000005ee <__fp_pscB>:
 5ee:	00 24       	eor	r0, r0
 5f0:	0a 94       	dec	r0
 5f2:	12 16       	cp	r1, r18
 5f4:	13 06       	cpc	r1, r19
 5f6:	14 06       	cpc	r1, r20
 5f8:	05 06       	cpc	r0, r21
 5fa:	08 95       	ret

000005fc <__fp_round>:
 5fc:	09 2e       	mov	r0, r25
 5fe:	03 94       	inc	r0
 600:	00 0c       	add	r0, r0
 602:	11 f4       	brne	.+4      	; 0x608 <__fp_round+0xc>
 604:	88 23       	and	r24, r24
 606:	52 f0       	brmi	.+20     	; 0x61c <__fp_round+0x20>
 608:	bb 0f       	add	r27, r27
 60a:	40 f4       	brcc	.+16     	; 0x61c <__fp_round+0x20>
 60c:	bf 2b       	or	r27, r31
 60e:	11 f4       	brne	.+4      	; 0x614 <__fp_round+0x18>
 610:	60 ff       	sbrs	r22, 0
 612:	04 c0       	rjmp	.+8      	; 0x61c <__fp_round+0x20>
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	08 95       	ret

0000061e <__fp_split3>:
 61e:	57 fd       	sbrc	r21, 7
 620:	90 58       	subi	r25, 0x80	; 128
 622:	44 0f       	add	r20, r20
 624:	55 1f       	adc	r21, r21
 626:	59 f0       	breq	.+22     	; 0x63e <__fp_splitA+0x10>
 628:	5f 3f       	cpi	r21, 0xFF	; 255
 62a:	71 f0       	breq	.+28     	; 0x648 <__fp_splitA+0x1a>
 62c:	47 95       	ror	r20

0000062e <__fp_splitA>:
 62e:	88 0f       	add	r24, r24
 630:	97 fb       	bst	r25, 7
 632:	99 1f       	adc	r25, r25
 634:	61 f0       	breq	.+24     	; 0x64e <__fp_splitA+0x20>
 636:	9f 3f       	cpi	r25, 0xFF	; 255
 638:	79 f0       	breq	.+30     	; 0x658 <__fp_splitA+0x2a>
 63a:	87 95       	ror	r24
 63c:	08 95       	ret
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	14 06       	cpc	r1, r20
 644:	55 1f       	adc	r21, r21
 646:	f2 cf       	rjmp	.-28     	; 0x62c <__fp_split3+0xe>
 648:	46 95       	lsr	r20
 64a:	f1 df       	rcall	.-30     	; 0x62e <__fp_splitA>
 64c:	08 c0       	rjmp	.+16     	; 0x65e <__fp_splitA+0x30>
 64e:	16 16       	cp	r1, r22
 650:	17 06       	cpc	r1, r23
 652:	18 06       	cpc	r1, r24
 654:	99 1f       	adc	r25, r25
 656:	f1 cf       	rjmp	.-30     	; 0x63a <__fp_splitA+0xc>
 658:	86 95       	lsr	r24
 65a:	71 05       	cpc	r23, r1
 65c:	61 05       	cpc	r22, r1
 65e:	08 94       	sec
 660:	08 95       	ret

00000662 <__fp_zero>:
 662:	e8 94       	clt

00000664 <__fp_szero>:
 664:	bb 27       	eor	r27, r27
 666:	66 27       	eor	r22, r22
 668:	77 27       	eor	r23, r23
 66a:	cb 01       	movw	r24, r22
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__udivmodhi4>:
 670:	aa 1b       	sub	r26, r26
 672:	bb 1b       	sub	r27, r27
 674:	51 e1       	ldi	r21, 0x11	; 17
 676:	07 c0       	rjmp	.+14     	; 0x686 <__udivmodhi4_ep>

00000678 <__udivmodhi4_loop>:
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	a6 17       	cp	r26, r22
 67e:	b7 07       	cpc	r27, r23
 680:	10 f0       	brcs	.+4      	; 0x686 <__udivmodhi4_ep>
 682:	a6 1b       	sub	r26, r22
 684:	b7 0b       	sbc	r27, r23

00000686 <__udivmodhi4_ep>:
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	5a 95       	dec	r21
 68c:	a9 f7       	brne	.-22     	; 0x678 <__udivmodhi4_loop>
 68e:	80 95       	com	r24
 690:	90 95       	com	r25
 692:	bc 01       	movw	r22, r24
 694:	cd 01       	movw	r24, r26
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
